                  Ergänzungen zum Konzept für Sextant Karte
                  -----------------------------------------

Kartenstruktur hier:
-------------------
 __    __    __    __
/  \__/  \__/  \__/  \
\__/  \__/  \__/  \__/
/  \__/  \__/  \__/  \
\__/  \__/  \__/  \__/
/  \__/  \__/  \__/  \
\__/  \__/  \__/  \__/
/  \__/  \__/  \__/  \
\__/  \__/  \__/  \__/

Alternativ:
-----------

 \ / \ / \ / \ / \ / \ / \
  |   |   |   |   |   |   | 
 / \ / \ / \ / \ / \ / \ / 
|   |   |   |   |   |   |
 \ / \ / \ / \ / \ / \ / \
  |   |   |   |   |   |   | 
 / \ / \ / \ / \ / \ / \ / 
|   |   |   |   |   |   |
 \ / \ / \ / \ / \ / \ / \
  |   |   |   |   |   |   | 
 / \ / \ / \ / \ / \ / \ / 


Zeichnen:
---------

Grösse: Um jede Linie (ohne Knick) ist ein Viereck. Dieses bestimmt die Grösse.
Es gibt 3 Viereck-Typen (s.Kartenstruktur):
1 / luro
2 \ loru
3 _ loro oben (oder alternativ | lolu)
4   leer (nicht zu zeichnen)

==> Gitternetzstruktur (aber: nicht unbedingt quadratisch!) wie folgt:

1332133213321332...
2441244124412441...
...................
...................
...................

Alternativ:

1212121212...
3434343434...
3434343434...
2121212121...
.............
.............
.............

Struktur der Elemente orientiert sich an den Eckpunkten des Vierecks:
1: von links unten nach rechts oben (oder umgekehrt)
2: von links oben nach rechts unten (oder umgekehrt)
3: von links oben nach rechts oben (oder umgekehrt)
alternativ: von links oben nach links unten (oder umgekehrt)

Koordinaten:
------------
(?)
Zwei Koordinaten legen eindeutig einen "Sechseck-Punkt" fest.
3 Verschiedene Möglichkeiten fuer Koordinatenfestlegung:
- Zwei sich kreuzende schräge Sechseck-linien
- Eine gerade Sechseck-Linie und eine der zwei schrägen Sechseck-Linien.
Nullpunkt der Koordinaten: links oberes Sechseck (0/0), geordnet wie im
normal (d.h. senkrecht/waagrecht).
Ermitteln von Koordinaten (per Maus): s. Kartenstücke

Kartenstücke
------------
wie normal, bis auf Struktur (wie Karte und Koordinaten).
Setzen/Aufnehmen von Kartenstücken erfordert mehr Aufwand:
a) Bestimmung des Vierecks und des Viereck-Typs (!!)
b) bei 3/4 Koordinatenbestimmung trivial (ähnlich wie bei normal Koordinaten)
c) bei 1/2 zwei verschiedene Koordinaten möglich UND ungültige Koordinaten
   (an den Rändern und in den Ecken der Karte!)
   Bestimmung ob Punkt in oberer (oder unterer) Dreiecksfläche ist mit Hilfe
   der drei Eckpunkten des entsprechenden Dreiecks:
   - Testen (mit Schnittpunkts-Algorithmus. 402/403 Sedgewick) ob vertikale 
     Linie vom Mauspunkt aus nach oben/unten schräge Linie (loru/luro)
     schneidet. Wenn ja liegt Punkt nicht im oberen (unteren) Dreieck.

Algorithmus aus Sedgewick
-------------------------

struct point { int x, y; };           // 2D Punkt
struct line { struct point p1, p2; }; // 2D Linie aus zwei 2D Punkten

int ccw(struct point p0,struct point p1,struct point p2)
// Gehe von P1 zu P2 und zu P2.
// Teste ob Richtung im oder gegen den Uhrzeigersinn war
{
   int dx1, dx2, dy1, dy2;
   dx1 = p1.x-p0.x; dy1 = p1.y-p0.y;
   dx2 = p2.x-p0.x; dy1 = p2.y-p0.y;
   if (dx1*dy2 > dy1*dx2) return +1;
   if (dx1*dy2 < dy1*dx2) return -1;
   if ((dx1*dx2) < 0 || (dy1*dy2 < 0)) return -1; 
   if ((dx1*dx1+dy1*dy1) < (dx2*dx2+dy2*dy2)) return +1:
   return 0;
}

int intersect(struct line l1, struct line l2)
{
   return ((ccw(l1.p1, l1.p2, l2.p1)
           *ccw(l1.p1, l1.p2, l2.p2)) <=0)
       && ((ccw(l2.p1, l2.p2, l1.p1)
           *ccw(l2.p1, l2.p2, l1.p2)) <=0)
}

Alternative: Schnittpunkt berechnen und prüfen ob er zwischen Endpunkten der
             beiden Linien liegt.
